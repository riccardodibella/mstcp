Apertura della connessione (Active open):

Socket: 
- Quando il TCB viene creato, si imposta ms_state = UNKNOWN, che comunque dovrebbe essere sovrascritto più tardi sia per active che per passive open
Rettifica: il TCB non viene creato durante socket, quindi basta impostare cb_type = CB_TYPE_NONE

Bind: non cambia niente

Connect:
- Se lo stato nel TCB è BOUND, sempre DISCOVERY-SYN
- Se lo stato nel TCB è ancora UNBOUND, scorro le connessioni filtrando solo in base a dst IP e port
	man mano che le scorro (scorro fdinfo), per ogni TCB:
	- se fdinfo[i].st != TCB_CREATED continue;
	- confronto fdinfo[i].tcb->st ...

Possibili valori di stato TCB:

#define TCP_CLOSED 10 // initial state
#define LISTEN 11  // represents waiting for a connection request from any remote TCP and port.
#define SYN_SENT 12 // represents waiting for a matching connection request after having sent a connection request.
#define SYN_RECEIVED 13 //  represents waiting for a confirming connection request acknowledgment after having both received and sent a connection request.
#define ESTABLISHED 14 // - represents an open connection, data received can be delivered to the user.  The normal state for the data transfer phase of the connection.
#define FIN_WAIT_1 15 // waiting for a connection termination request from the remote TCP, or an acknowledgment of the conne
#define FIN_WAIT_2 16 // waiting for a connection termination request from the remote TCP.
#define CLOSE_WAIT 17 // waiting for a connection termination request from the local user.
#define CLOSING 18  // waiting for a connection termination request acknowledgment from the remote TCP.
#define LAST_ACK 19 // waiting for an acknowledgment of the connection termination request previously sent to the remote TCP
#define TIME_WAIT 20 //waiting for enough time to pass to be sure the remote TCP received the acknowledgment of its connection

Se lo stato è > ESTABLISHED sto già chiudendo quella connessione (se era MS-TCP vuol dire che tutti gli stream sono stati chiusi) -> continue;
Se lo stato è LISTEN non c'è nessuna connessione associata a quel TCB specifico, e le connessioni nella backlog sono passive open e quindi non possono essere usate per aprire nuovi stream -> continue;
Se lo stato è SYN_RECEIVED, sto facendo un passive open e quindi non posso usarla per aprire stream -> continue;


Se lo stato è ESTABLISHED, aggiungo un'informazione di stato nel TCB che mi dice se quella connessione è stata creata come passive o come active open
	- passive open -> continue;
	- active open -> rimane un candidato utile (vedi dopo)


Se lo stato è SYN_SENT sto cercando di aprire una connessione quando il primo connect() non è ancora terminato (nonblocking connect?). Ho due opzioni:
- Scarto il candidato a prescindere senza aspettare che arrivi il SYN+ACK
- Se IP e porta sono giusti, aspetto che quella connessione venga stabilita, o fino a un timeout. Quando è stata stabilita o il timeout è scaduto rifaccio il controllo. Questo passaggio va
	pensato un po' meglio.
Per il momento scarto il candidato a prescindere. Sarebbe da valutare come funzionano i browser reali, se aprono una connessione sola all'inizio verso il sito e poi le altre le aprono dopo (e
in questo caso va bene scartare il candidato) oppure se ne aprono 6 già all'inizio (e in questo caso si vanificherebbe l'utilizzo di MS-TCP, che aprirebbe 6 canali indipendenti). 





Trasmissione:

Nel Channel Control Block c'è una linked list con i segmenti unacked che sono già stati accodati per la trasmissione dallo scheduler. Nello Stream Control Block c'è un array che contiene
i byte nello stream che devono ancora essere consumati dallo scheduler. L'applicazione può continuare a chiamare write() finchè lo spazio nel buffer circolare per quello stream non finisce.


Scheduler:
Lo scheduler è una funzione che viene chiamata quando c'è spazio nella congestion window per trasmettere un nuovo segmento oltre a quelli già presenti nella TX queue del canale.
Quando lo scheduler inserisce un segmento nella TX queue libera lo spazio del payload corrispondente dal buffer circolare dello stream. Quando il segmento è creato, viene generata l'opzione 
MS-TCP con gli Stream ID e Stream Segment Number corretti; viene anche associato ad un Sequence Number all'interno del canale. Rimangono da calcolare il cumulative ACK, gli eventuali SACK
e la checksum, che verranno aggiornati ogni volta che il segmento viene trasmesso e ristrasmesso. 

Quando si prepara un segmento, viene allocato sempre il massimo dello spazio per le opzioni. A regime, tutti e 40 i byte di opzioni possono essere occupati in questo modo:
MS-TCP (4 byte) | Timestamps (10 byte) | SACK (2 + 3*8 bytes / 3 records max)
Quando si calcolano le opzioni all'invio del segmento, usiamo 0x01 come padding interno (ad esempio se non mettiamo l'opzione MS-TCP in un segmento normale) e 0x00 per concludere in anticipo
le opzioni (ad esempio se ci sono meno di 3 record SACK).
Per info vedere il file supported_extensions.txt.

Lo scheduler viene chiamato dopo ogni pacchetto ricevuto, perchè potrebbe essersi liberato o aggiunto spazio nella congestion window, e alla fine di mywrite, perchè potrei essere stato in 
attesa di nuovi dati da inviare.
Al momento lo scheduler se lo stream con la flight size minore ha un segmento incompleto da trasmettere lo privilegia rispetto a un altro stream con una flight size più alta ma che può 
trasmettere un segmento intero. Per il momento lascio così (anche perchè ho lo pseudocodice già impostato), potrebbe essere utile pensarci meglio più avanti.



struct scheduler_stream_info{
	int stream_id;
	int ready_bytes; // number of bytes that can be read from the local circular buffer of this stream
	int flow_control_bytes; // number of bytes that can be sent on the stream without violating receiver flow control for this stream
	int flight_size; // number of unacked bytes in flight
};

void scheduler(struct channel_control_block* ccb){
	
	struct scheduler_stream_info* scheduler_stream_list = (...*) malloc(sizeof(struct scheduler_stream_info) * ccb->active_streams); // one element for each active stream

	/* fill stream_id field in scheduler_stream_list */

	int tot_space = get_free_space_in_cwnd(); // TODO come si fa?
	nagle_flag = 1 if (already one not full segment in flight) else 0;

	/* fill ready_bytes field in scheduler_stream_list; if nagle_flag == 1 set ready_bytes = 0 if its value is lower than max segment payload */

	for(int i=0; i<ccb->active_streams; i++){
		scheduler_stream_list[i].flight_size = 0;
	}

	/* traverse the linked list of unacked segments in flight and accumulate the payload size in flight_size */

	/* somehow (TODO capire come) initialize flow_control_bytes */

	while(tot_space > 0){
		int space = min(tot_space, max segment payload);

		if(nagle_flag && space < max segment payload){
			break;
		}

		int chosen_stream_id = -1;
		int chosen_stream_flight_size = -1;

		

		for(i=0; i<ccb->active_streams; i++){
			if(scheduler_stream_list[i].ready_bytes == 0){
				continue;
			}
			if(chosen_stream_id == -1){
				chosen_stream_id = scheduler_stream_list[i].stream_id;
				chosen_stream_flight_size = scheduler_stream_list[i].flight_size;
				continue;
			}
			if(scheduler_stream_list[i].flight_size < chosen_stream_flight_size){
				chosen_stream_id = scheduler_stream_list[i].stream_id;
				chosen_stream_flight_size = scheduler_stream_list[i].flight_size;
			}
		}



		if(chosen_stream_id == -1){
			break;
		}

		int chosen_list_index;
		for(chosen_list_index = 0; ;chosen_list_index++){
			if(scheduler_stream_list[chosen_list_index].stream_id == chosen_stream_id){
				break;
			}
		}

		int segment_payload_size = min(space, scheduler_stream_list[chosen_list_index].ready_bytes);

		prepare_tcp(...);

		tot_space -= segment_payload_size;
		nagle_flag |= (segment_payload_size < max segment payload);
		scheduler_stream_list[chosen_list_index].ready_bytes -= segment_payload_size;
		scheduler_stream_list[chosen_list_index].flow_control_bytes -= segment_payload_size;
		scheduler_stream_list[chosen_list_index].flight_size += segment_payload_size;


		if(nagle_flag){
			for(int i=0; i<ccb->active_streams; i++){
				if(scheduler_stream_list[i].ready_bytes < max segment payload){
					scheduler_stream_list[i].ready_bytes = 0;
				}
			}
		}
	}
	return;
}

La interazione tra TCP Options e Nagle's Algorithm è standardizzata? L'MSS (inviato nell'opzione durante l'handshake) include solo le parti fisse degli header, quindi se MTU=1500B allora MSS=1460B. Dato
che a regime ci sono sempre opzioni nell'header, Imposto la generazione di pacchetti in questo modo.
1. Prima di iniziare a generare i pacchetti, calcolo quanti byte di header mi servono per ogni pacchetto (opts). Questo è un valore fisso che dipende solo dal tipo di connessione (MS o meno).
2. Per MS, il nagle_flag (che vale 1 se ho almeno un pacchetto in volo con size non massima) lo calcolo controllando se uno di quei pacchetti ha dimensione totale IP < 1500, oppure se la lunghezza del payload 
è MSS - opts.
3. Consumo i dati da trasmettere normalmente, in blocchi di MSS - opts byte.
Se faccio così, c'è qualche controindicazione nel mettere MSS = 1460 invece di 1400 come era impostato in mytcp? Questo mi consente di creare i segmenti usando sizeof(struct tcp_segment) e mettendo come size
del campo payload (che include anche le opzioni) 1460 nella definizione di struct tcp_segment. Edit: va bene così.




Apertura della connessione (Passive open):

[DOMANDA] Per i TCB dei socket listening, va aggiunto un campo per salvare, quando lo stato è SYN_SENT, se si sta aprendo una connessione MS-TCP o meno. Dato che tanti campi non servono, ha senso fare
un altro tipo di Control Block (LCB Listen Control Block) che ha meno campi del TCB a parte questo campo aggiunto oppure tengo il TCB normale e ci aggiungo solo un campo, che viene riazzerato quando
duplico il TCB quando ricevo l'ACK che fa tornare in stato LISTEN? Se si sceglie di creare un LCB, quando in SYN_RECEIVED ricevo un ACK prima di tornare a LISTEN devo creare un TCB dal LCB corrente se
non viene negoziato il Multi-Stream, altrimenti se uso il TCB basta clonarlo come viene fatto adesso.

Il ciclo LISTEN/SYN_RECEIVED funziona in modo simile al TCP normale, con la modifica che quando viene aggiunto un Control Block alla backlog il suo tipo dipende dal valore del campo aggiuntivo inserito
nel listening TCB, che dice se si sta aprendo canale Multi-Stream o no. In caso venga creato un CCB da aggiungere alla backlog, viene già creato anche lo SCB per lo stream 0 (in modo analogo a quello che
succede per l'active open) e viene aggiunto alla lista di stream del CCB. 


[DOMANDA] Al momento myaccept() funziona solo se lo stato del TCB del listening socket è LISTEN. Dato che per quel socket lo stato passa per ogni connessione da LISTEN a SYN_RECEIVED, dovrei consentire
entrambi gli stati, giusto? Quindi diventerebbe if(fdinfo[s].tcb->st!=LISTEN && fdinfo[s].tcb->st!=SYN_RECEIVED).


Per non cambiare la semantica della backlog length, viene conteggiato il numero di stream anzichè il numero di channels, sommato sempre al numero di connessioni TCP normali. Dato che in ogni caso
la backlog va sempre percorsa tutta per fare qualsiasi azione, la backlog può diventare una lista concatenata di TCB e CCB di lunghezza variabile. Nella entry di fdinfo viene salvato anche il numero di 
connessioni pronte da accettare assieme alla backlog length (che invece è il numero massimo a cui il numero di connessioni pronte può arrivare).

Quando viene chiamato accept(), si prende la prima entry della lista concatenata della backlog. 
- Se è un TCB, si rimuove quella entry dalla backlog, la si associa a un nuovo file descriptor, si linka il TCB in chinfo, e si diminuisce il numero di connessioni pendenti in fdinfo per quel listening socket. 
- Se è un CCB, si vuole assegnare il primo stream non ancora accettato ad un nuovo file descriptor. Si fa così:
	- Il numero del primo stream non ancora accettato corrisponde al numero di stream di cui è già stato fatto l'accept (campo accepted_streams del CCB)
	- Si cerca quello stream all'interno della lista di stream del CCB
	- Si associa quello SCB ad un nuovo file descriptor
	- Si incrementa accepted_streams del CCB e si diminuisce il numero di connessioni pendenti in fdinfo per quel listening socket

I CCB non vengono mai rimossi dalla backlog queue fino a quando il canale non viene chiuso.